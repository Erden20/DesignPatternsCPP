#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;


class IObserver {
public:
    virtual void update(double usdRate, double eurRate) = 0;
    virtual ~IObserver() {}
};


class ISubject {
public:
    virtual void addObserver(IObserver* obs) = 0;
    virtual void removeObserver(IObserver* obs) = 0;
    virtual void notifyObservers() = 0;
    virtual ~ISubject() {}
};


class CurrencyExchange : public ISubject {
private:
    vector<IObserver*> observers;
    double usdRate = 0.0;
    double eurRate = 0.0;

public:
    void setRates(double usd, double eur) {
        usdRate = usd;
        eurRate = eur;
        cout << "\n[CurrencyExchange] –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: USD = " << usdRate << ", EUR = " << eurRate << endl;
        notifyObservers();
    }

    void addObserver(IObserver* obs) override {
        
        if (find(observers.begin(), observers.end(), obs) == observers.end())
            observers.push_back(obs);
    }

    void removeObserver(IObserver* obs) override {
        observers.erase(remove(observers.begin(), observers.end(), obs), observers.end());
    }

    void notifyObservers() override {
        for (auto obs : observers) {
            if (obs) obs->update(usdRate, eurRate);
        }
    }
};


class MobileAppObserver : public IObserver {
public:
    void update(double usdRate, double eurRate) override {
        cout << "üì± MobileApp: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî USD=" << usdRate << ", EUR=" << eurRate << endl;
    }
};

class WebAppObserver : public IObserver {
public:
    void update(double usdRate, double eurRate) override {
        cout << "üåê WebApp: –æ–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∞–π—Å ‚Äî USD=" << usdRate << ", EUR=" << eurRate << endl;
    }
};

class EmailNotifierObserver : public IObserver {
private:
    string email;
public:
    EmailNotifierObserver(const string& e) : email(e) {}
    void update(double usdRate, double eurRate) override {
        cout << "üìß Email to " << email << ": –∫—É—Ä—Å—ã USD=" << usdRate << ", EUR=" << eurRate << endl;
    }
};


int main() {
    setlocale(LC_ALL, "Russian");

    CurrencyExchange exchange;

    MobileAppObserver mobile;
    WebAppObserver web;
    EmailNotifierObserver email("student@example.com");


    exchange.addObserver(&mobile);
    exchange.addObserver(&web);
    exchange.addObserver(&email);

    cout << "=== Demo Observer (CurrencyExchange) ===\n";
    cout << "–°—Ü–µ–Ω–∞—Ä–∏–π: –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∏ —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n";


    exchange.setRates(478.5, 506.3);


    exchange.setRates(480.2, 508.1);


    cout << "\n–£–¥–∞–ª—è–µ–º WebAppObserver (–±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)...\n";
    exchange.removeObserver(&web);

    exchange.setRates(481.0, 507.9);

    cout << "\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...";
    cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // –æ—á–∏—Å—Ç–∫–∞
    cin.get();
    return 0;
}
